//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SuperVCore.Context
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EnoplasticEntities : DbContext
    {
        public EnoplasticEntities()
            : base("name=EnoplasticEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AS400ImportData> AS400ImportData { get; set; }
        public virtual DbSet<Departments> Departments { get; set; }
        public virtual DbSet<Downtimes> Downtimes { get; set; }
        public virtual DbSet<General> General { get; set; }
        public virtual DbSet<MachineAlarms> MachineAlarms { get; set; }
        public virtual DbSet<Machines> Machines { get; set; }
        public virtual DbSet<MachinesAlarmsLog> MachinesAlarmsLog { get; set; }
        public virtual DbSet<MachineSetUpParts> MachineSetUpParts { get; set; }
        public virtual DbSet<MachineStates> MachineStates { get; set; }
        public virtual DbSet<MachineStatus> MachineStatus { get; set; }
        public virtual DbSet<Materials> Materials { get; set; }
        public virtual DbSet<MaterialsWeights> MaterialsWeights { get; set; }
        public virtual DbSet<ProcessingSteps> ProcessingSteps { get; set; }
        public virtual DbSet<Production> Production { get; set; }
        public virtual DbSet<SetUpParts> SetUpParts { get; set; }
        public virtual DbSet<SetUpPartsLog> SetUpPartsLog { get; set; }
        public virtual DbSet<Shifts> Shifts { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Workers> Workers { get; set; }
        public virtual DbSet<Works> Works { get; set; }
        public virtual DbSet<WorkStates> WorkStates { get; set; }
        public virtual DbSet<View_ExportWorks> View_ExportWorks { get; set; }
        public virtual DbSet<View_ExportWorks2> View_ExportWorks2 { get; set; }
    
        public virtual ObjectResult<SP_AggegatedData_Machine_Result> SP_AggegatedData_Machine(Nullable<int> machine)
        {
            var machineParameter = machine.HasValue ?
                new ObjectParameter("Machine", machine) :
                new ObjectParameter("Machine", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_AggegatedData_Machine_Result>("SP_AggegatedData_Machine", machineParameter);
        }
    
        public virtual ObjectResult<SP_AggegatedDowntimes_Machine_CODE_Result> SP_AggegatedDowntimes_Machine_CODE(Nullable<int> machine, string code)
        {
            var machineParameter = machine.HasValue ?
                new ObjectParameter("Machine", machine) :
                new ObjectParameter("Machine", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_AggegatedDowntimes_Machine_CODE_Result>("SP_AggegatedDowntimes_Machine_CODE", machineParameter, codeParameter);
        }
    
        public virtual ObjectResult<SP_AggegatedPhase_Machine_CODE_Result> SP_AggegatedPhase_Machine_CODE(Nullable<int> machine, string code)
        {
            var machineParameter = machine.HasValue ?
                new ObjectParameter("Machine", machine) :
                new ObjectParameter("Machine", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_AggegatedPhase_Machine_CODE_Result>("SP_AggegatedPhase_Machine_CODE", machineParameter, codeParameter);
        }
    
        public virtual ObjectResult<SP_AggegatedSetUpLog_Machine_CODE_Result> SP_AggegatedSetUpLog_Machine_CODE(Nullable<int> machine, string code)
        {
            var machineParameter = machine.HasValue ?
                new ObjectParameter("Machine", machine) :
                new ObjectParameter("Machine", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_AggegatedSetUpLog_Machine_CODE_Result>("SP_AggegatedSetUpLog_Machine_CODE", machineParameter, codeParameter);
        }
    
        public virtual ObjectResult<SP_AggegatedWorks_Machine_Result> SP_AggegatedWorks_Machine(Nullable<int> machine)
        {
            var machineParameter = machine.HasValue ?
                new ObjectParameter("Machine", machine) :
                new ObjectParameter("Machine", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_AggegatedWorks_Machine_Result>("SP_AggegatedWorks_Machine", machineParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<SP_GraphicProduction_GroupBy_Machines_Result> SP_GraphicProduction_GroupBy_Machines(string groupBy, Nullable<int> machine)
        {
            var groupByParameter = groupBy != null ?
                new ObjectParameter("GroupBy", groupBy) :
                new ObjectParameter("GroupBy", typeof(string));
    
            var machineParameter = machine.HasValue ?
                new ObjectParameter("Machine", machine) :
                new ObjectParameter("Machine", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GraphicProduction_GroupBy_Machines_Result>("SP_GraphicProduction_GroupBy_Machines", groupByParameter, machineParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int SP_InsertNewProduction()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertNewProduction");
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<SP_ReportWorks_StartDate_EndDate_Result> SP_ReportWorks_StartDate_EndDate(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ReportWorks_StartDate_EndDate_Result>("SP_ReportWorks_StartDate_EndDate", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<SP_ReportWorks_StartDate_EndDate_MachineID_Result> SP_ReportWorks_StartDate_EndDate_MachineID(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> machineID)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var machineIDParameter = machineID.HasValue ?
                new ObjectParameter("machineID", machineID) :
                new ObjectParameter("machineID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ReportWorks_StartDate_EndDate_MachineID_Result>("SP_ReportWorks_StartDate_EndDate_MachineID", startDateParameter, endDateParameter, machineIDParameter);
        }
    
        public virtual ObjectResult<SP_ReportWorks2_StartDate_EndDate_Result> SP_ReportWorks2_StartDate_EndDate(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ReportWorks2_StartDate_EndDate_Result>("SP_ReportWorks2_StartDate_EndDate", startDateParameter, endDateParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
